[ADD]
prototype = "ADD x y"
aliases = ["+"]
short = "add `x` and `y` together"

[SUB]
prototype = "SUB x y"
aliases = ["-"]
short = "subtract `y` from `x`"

[MUL]
prototype = "MUL x y"
aliases = ["*"]
short = "multiply `x` and `y` together"
description = "returns `x` times `y`, bounded to integer limits"

[DIV]
prototype = "DIV x y"
aliases = ["/"]
short = "divide `x` by `y`"

[MOD]
prototype = "MOD x y"
aliases = ["%"]
short = "find the remainder after division of `x` by `y`"

[RAND]
prototype = "RAND x"
aliases = ["RND"]
short = "generate a random number between `0` and `x` inclusive"

[RRAND]
prototype = "RRAND x y"
aliases = ["RRND"]
short = "generate a random number between `x` and `y` inclusive"

[TOSS]
prototype = "TOSS"
short = "randomly return `0` or `1`"

["?"]
prototype = "? x y z"
short = "if condition `x` is true return `y`, otherwise return `z`"

[MIN]
prototype = "MIN x y"
short = "return the minimum of `x` and `y`"

[MAX]
prototype = "MAX x y"
short = "return the maximum of `x` and `y`"

[LIM]
prototype = "LIM x y z"
short = "limit the value `x` to the range `y` to `z` inclusive"

[WRAP]
prototype = "WRAP x y z"
aliases = ["WRP"]
short = "limit the value `x` to the range `y` to `z` inclusive, but with wrapping"

[QT]
prototype = "QT x y"
short = "round `x` to the closest multiple of `y` (quantise)"

[QT.S]
prototype = "QT.S i r s"
short = "quantize note number `i` (-127..127) to note number in scale `s` (0-8, reference N.S scales) with root note `r` (-127..127)"

[QT.CS]
prototype = "QT.CS i r s d c"
short = "quantize note number `i` (-127..127) to note number in chord `c` (1-7) from scale `s` (0-8, reference N.S scales) at degree `d` (1-7) with root note `r` (-127..127)."
description = """
Quantize note number `i` (-127..127) to note number in chord `c` (1-7) from scale `s` (0-8, reference N.S scales) at degree `d` (1-7) with root note `r` (-127..127).

Chords (1-7)
 - `1` = Tonic
 - `2` = Third
 - `3` = Triad
 - `4` = Seventh
 - etc.
"""

[QT.B]
prototype = "QT.B i r b"
short = "quantize `i` to note number in scale bitmask `b` (LSB = root) with root note `r`"

[AVG]
prototype = "AVG x y"
short = "the average of `x` and `y`"

[EQ]
prototype = "EQ x y"
aliases = ["=="]
short = "does `x` equal `y`"

[NE]
prototype = "NE x y"
aliases = ["!=", "XOR"]
short = "`x` is not equal to `y`"

[LT]
prototype = "LT x y"
aliases = ["<"]
short = "`x` is less than `y`"

[GT]
prototype = "GT x y"
aliases = [">"]
short = "`x` is greater than `y`"

[LTE]
prototype = "LTE x y"
aliases = ["<="]
short  = "`x` is less than or equal to `y`"

[GTE]
prototype = "GTE x y"
aliases = [">="]
short = "`x` is greater than or equal to `y`"

[EZ]
prototype = "EZ x"
aliases = ["!"]
short  = "`x` is `0`, equivalent to logical NOT"

[NZ]
prototype = "NZ x"
short = "`x` is not `0`"

[LSH]
prototype = "LSH x y"
aliases = ["<<"]
short = "left shift `x` by `y` bits, in effect multiply `x` by `2` to the power of `y`"

[RSH]
prototype = "RSH x y"
aliases = [">>"]
short = "right shift `x` by `y` bits, in effect divide `x` by `2` to the power of `y`"

[LROT]
prototype = "LROT x y"
aliases = ["<<<"]
short = "circular left shift `x` by `y` bits, wrapping around when bits fall off the end"

[RROT]
prototype = "RROT x y"
aliases = [">>>"]
short = "circular right shift `x` by `y` bits, wrapping around when bits fall off the end"

["|"]
prototype = "| x y"
short = "bitwise or `x` | `y`"

["&"]
prototype = "& x y"
short = "bitwise and `x` & `y`"

["^"]
prototype = "^ x y"
short = "bitwise xor `x` ^ `y`"

["~"]
prototype = "~ x"
short = "bitwise not, i.e.: inversion of `x`"

[BSET]
prototype = "BSET x y"
short = "set bit `y` in value `x`"

[BGET]
prototype = "BGET x y"
short = "get bit `y` in value `x`"

[BCLR]
prototype = "BCLR x y"
short = "clear bit `y` in value `x`"

[BTOG]
prototype = "BTOG x y"
short = "toggle bit `y` in value `x`"

[ABS]
prototype = "ABS x"
short = "absolute value of `x`"

[AND]
prototype = "AND x y"
aliases = ["&&"]
short = "logical AND of `x` and `y`"
description = """
Logical AND of `x` and `y`. Returns `1` if both `x` and `y` are greater than `0`, otherwise it returns `0`.
"""

[OR]
prototype = "OR x y"
aliases = ["||"]
short = "logical OR of `x` and `y`"
description = """
Logical OR of `x` and `y`. Returns `1` if either `x` or `y` are greater than `0`, otherwise it returns `0`.
"""

[JI]
prototype = "JI x y"
short = "just intonation helper, precision ratio divider normalised to 1V"

[SCALE]
prototype = "SCALE a b x y i"
aliases = ["SCL"]
short = "scale `i` from range `a` to `b` to range `x` to `y`, i.e. `i * (y - x) / (b - a)`"

[ER]
prototype = "ER f l i"
short = "Euclidean rhythm, `f` is fill (`1-32`), `l` is length (`1-32`) and `i` is step (any value), returns `0` or `1`"
description="""
Euclidean rhythm helper, as described by Godfried Toussaint in his 2005 paper ["The Euclidean Algorithm Generates Traditional Musical Rhythms"][euclidean_rhythm_paper][^euclidean_rhythm_citation]. From the abstract:

 - `f` is fill (`1-32`) and should be less then or equal to length
 - `l` is length (`1-32`)
 - `i` is the step index, and will work with negative as well as positive numbers

If you wish to add rotation as well, use the following form:

```
ER f l SUB i r
```

where `r` is the number of step of _forward_ rotation you want.

For more info, see the post on [samdoshi.com][samdoshi_com_euclidean]

[samdoshi_com_euclidean]: http://samdoshi.com/post/2016/03/teletype-euclidean/
[euclidean_rhythm_paper]: http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf
[^euclidean_rhythm_citation]: Toussaint, G. T. (2005, July). The Euclidean algorithm generates traditional musical rhythms. _In Proceedings of BRIDGES: Mathematical Connections in Art, Music and Science_ (pp. 47-56).
"""

[NR]
prototype = "NR p m f s"
short = "Numeric Repeater, `p` is prime pattern (`0-31`), `m` is & mask (`0-3`), `f` is variation factor (`0-16`) and `s` is step (`0-15`), returns `0` or `1`"
description = """
Numeric Repeater is similar to ER, except it generates patterns using the binary arithmetic process found in ["Noise Engineering's Numeric Repetitor"][numeric_repetitor]. From the description:

Numeric Repetitor is a rhythmic gate generator based on binary arithmetic. A core pattern forms the basis and variation is achieved by treating this pattern as a binary number and multiplying it by another. NR contains 32 prime rhythms derived by examining all possible rhythms and weeding out bad ones via heuristic.

All parameters wrap around their specified ranges automatically and support negative indexing.

Masks
 - `0` is no mask
 - `1` is `0x0F0F`
 - `2` is `0xF003`
 - `3` is `0x1F0`

For further detail ["see the manual"][nr_manual].

[numeric_repetitor]: https://www.noiseengineering.us/shop/numeric-repetitor
[nr_manual]: https://static1.squarespace.com/static/58c709192e69cf2422026fa6/t/5e6041ad4cbc0979d6d793f2/1583366574430/NR_manual.pdf
"""

[BPM]
prototype = "BPM x"
short = "milliseconds per beat in BPM `x`"

[N]
prototype = "N x"
short = "converts an equal temperament note number to a value usable by the CV outputs (`x` in the range `-127` to `127`)"
description = """
The `N` OP converts an equal temperament note number to a value usable by the CV outputs.

Examples:

```
CV 1 N 60        => set CV 1 to middle C, i.e. 5V
CV 1 N RAND 24   => set CV 1 to a random note from the lowest 2 octaves
```
"""

[VN]
prototype = "VN x"
short = "converts 1V/OCT value `x` to an equal temperament note number"

["N.S"]
prototype = "N.S r s d"
short = "Note Scale operator, `r` is the root note (`0-127`), `s` is the scale (`0-8`) and `d` is the degree (`1-7`), returns a value from the `N` table."
description = """
The `N.S` OP lets you retrieve `N` table values according to traditional western scales. `s` and `d` wrap to their ranges automatically and support negative indexing.

Scales
 - `0` = Major
 - `1` = Natural Minor
 - `2` = Harmonic Minor
 - `3` = Melodic Minor
 - `4` = Dorian
 - `5` = Phrygian
 - `6` = Lydian
 - `7` = Myxolidian
 - `8` = Locrian
"""

["N.C"]
prototype = "N.C r c d"
short = "Note Chord operator, `r` is the root note (`0-127`), `c` is the chord (`0-12`) and `d` is the degree (`0-3`), returns a value from the `N` table."
description = """
The `N.C` OP lets you retrieve `N` table values according to traditional western chords. `c` and `d` wrap to their ranges automatically and support negative indexing.

Chords
 - `0` = Major 7th `{0, 4, 7, 11}`
 - `1` = Minor 7th `{0, 3, 7, 10}`
 - `2` = Dominant 7th `{0, 4, 7, 10}`
 - `3` = Diminished 7th `{0, 3, 6, 9}`
 - `4` = Augmented 7th `{0, 4, 8, 10}`
 - `5` = Dominant 7b5 `{0, 4, 6, 10}`
 - `6` = Minor 7b5 `{0, 3, 6, 10}`
 - `7` = Major 7#5 `{0, 4, 8, 11}`
 - `8` = Minor Major 7th `{0, 3, 7, 11}`
 - `9` = Diminished Major 7th `{0, 3, 6, 11}`
 - `10` = Major 6th `{0, 4, 7, 9}`
 - `11` = Minor 6th `{0, 3, 7, 9}`
 - `12` = 7sus4 `{0, 5, 7, 10}`
 """
 
["N.CS"]
prototype = "N.CS r s d c"
short = "Note Chord Scale operator, `r` is the root note (`0-127`), `s` is the scale (`0-8`), `d` is the scale degree (`1-7`) and `c` is the chord component (`0-3`), returns a value from the `N` table."
description = """
The `N.CS` OP lets you retrieve `N` table values according to traditional western scales and chords. `s`, `c` and `d` wrap to their ranges automatically and support negative indexing.

Chord Scales - Refer to chord indices in `N.C` OP
 - `0` = Major `{0, 1, 1, 0, 2, 1, 6}`
 - `1` = Natural Minor `{1, 6, 0, 1, 1, 0, 2}`
 - `2` = Harmonic Minor `{8, 6, 7, 1, 2, 0, 3}`
 - `3` = Melodic Minor `{8, 1, 7, 2, 2, 6, 6}`
 - `4` = Dorian `{1, 1, 0, 2, 1, 6, 0}`
 - `5` = Phrygian `{1, 0, 2, 1, 6, 0, 1}`
 - `6` = Lydian `{0, 2, 1, 6, 0, 1, 1}`
 - `7` = Myxolidian `{6, 0, 1, 1, 0, 2, 1}`
 - `8` = Locrian `{6, 0, 1, 1, 0, 2, 1}`
 """
 
[V]
prototype = "V x"
short = "converts a voltage to a value usable by the CV outputs (`x` between `0` and `10`)"

[VV]
prototype = "VV x"
short = "converts a voltage to a value usable by the CV outputs (`x` between `0` and `1000`, `100` represents 1V)"

[EXP]
prototype = "EXP x"
short = "exponentiation table lookup. `0-16383` range (V `0-10`)"

[SGN]
prototype = "SGN x"
short = "sign function: 1 for positive, -1 for negative, 0 for 0"

[CHAOS]
prototype = "CHAOS x"
short = "get next value from chaos generator, or set the current value"

["CHAOS.R"]
prototype = "CHAOS.R x"
short = "get or set the `R` parameter for the `CHAOS` generator"

["CHAOS.ALG"]
prototype = "CHAOS.ALG x"
short = "get or set the algorithm for the `CHAOS` generator. 0 = LOGISTIC, 1 = CUBIC, 2 = HENON, 3 = CELLULAR"

[R]
prototype = "R"
short = "generate a random number"

["R.MIN"]
prototype = "R.MIN x"
short = "set the lower end of the range from 0 – 32767"

["R.MAX"]
prototype = "R.MAX x"
short = "set the upper end of the range from 0 – 32767"
